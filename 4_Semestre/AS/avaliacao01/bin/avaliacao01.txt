1) Um jogo de tabuleiro precisa garantir que apenas um tabuleiro seja criado.

a) Aplique o design pattern adequado e garanta a unicidade mesmo em um sistema multi-threaded.

b) Escreva na classe de aplicação do pattern, um método que retorne a mensagem “Tabuleiro pronto”.

package exe01;

public class Tabuleiro {
    
    private static Tabuleiro tabuleiro;

    private Tabuleiro() {
        
    }

    public synchronized static Tabuleiro getTabuleiro() {
        if (tabuleiro == null) {
            tabuleiro = new Tabuleiro();
            System.out.println("Tabuleiro pronto.");
        }
        return tabuleiro;
    }
}

c) Crie todas as classes necessárias e realize os testes de modo a satisfazer o que foi solicitado.

public class UsaTabuleiro extends Thread {

    @Override
    public void run() {
        Tabuleiro t = Tabuleiro.getTabuleiro();
        System.out.println(t);
    }

    public static void teste() {

        UsaTabuleiro t1 = new UsaTabuleiro();
        UsaTabuleiro t2 = new UsaTabuleiro();
        UsaTabuleiro t3 = new UsaTabuleiro();

        t1.start();
        t2.start();
        t3.start();
    }
}

2) Um fornecedor de determinado produto vende pacotes, caixas e até containers. Mas, também vende esses produtos no varejo. Independente da quantidade ou tamanho do pacote deve-se obter o preço total da venda.

a) Elabore um projeto que possibilite tratar, de maneira uniforme, objetos individuais e composições desses objetos.

public interface Component {
    
    public float getPreco();

}

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

import java.util.ArrayList;
import java.util.List;

public class Composite implements Component {
    
    private String nome;
    private List<Component> produtos = new ArrayList<>();

    public Composite(String nome) {
        this.nome = nome;
    }

    public String getNome() {
        return nome;
    }

    public void adicionar(Component p) {
        this.produtos.add(p);
    }

    @Override
    public float getPreco() {
        float total = 0;
        for (Component p : produtos) {
            total += p.getPreco();
        }
        return total;
    }

}

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

public class Leaf implements Component {
    
    private String nome;
    private float preco;

    public Leaf(String nome, float preco) {
        this.nome = nome;
        this.preco = preco;
    }

    @Override
    public float getPreco() {
        return preco;
    }

    public String getNome() {
        return nome;
    }
}

b) Escreva uma classe Main que teste a compra de produtos em caixas e fardos compostos de várias caixas.

public class UsaComposite {
    
    public static void teste() {

        Composite container = new Composite("Container");

        Composite caixa1 = new Composite("Caixa 01");
        Composite caixa2 = new Composite("Caixa 02");

        Component produto01 = new Leaf("Suco de Mimosa", 19.9f);
        Component produto02 = new Leaf("Chocalho", 5.4f);
        Component produto03 = new Leaf("Peão", 7.5f);
        Component produto04 = new Leaf("Tabuleiro", 49.0f);
        Component produto05 = new Leaf("Xiaomi MiBand 6 Delux Ultra", 2500.0f);
        Component produto06 = new Leaf("Bacon", 2.5f);

        caixa1.adicionar(produto01);
        caixa1.adicionar(produto02);
        caixa1.adicionar(produto03);

        caixa2.adicionar(produto04);
        caixa2.adicionar(produto05);
        caixa2.adicionar(produto06);

        container.adicionar(caixa1);
        container.adicionar(caixa2);

        System.out.printf("Preço total caixa 1: R$%.2f\n", caixa1.getPreco());
        System.out.printf("Preço total caixa 2: R$%.2f\n", caixa2.getPreco());
        System.out.printf("Preço total do container: R$%.2f\n", container.getPreco());
    }
}

3) Considere um sistema unificado que gerencia os processos financeiros de três bancos: Banco X, Banco Y e Banco Z. Cada banco tem as suas regras e cobranças de TED:
● Banco X - O cliente pode enviar até dois TEDs sem tarifas, acima disso será cobrada a taxa de R$2,00 por transferência.
● Banco Y - O cliente pode enviar até três TEDs sem tarifas, acima disso é cobrada a taxa de R$5,00 por transferência.
● Banco Z - O cliente pode enviar apenas um TED sem tarifas, acima disso é cobrada a taxa de R$2,50 por transferência.

a) Elabore um método que retorne o valor da taxa sobre o serviço financeiro.

public class TED {
    
    private float valor;

    public TED(float valor) {
        this.valor = valor;
    }

    public float getValor() {
        return valor;
    }
}

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

public class ListaTransferencia {
    
    private List<TED> transferencias = new ArrayList<>();


    public ListaTransferencia() {

    }

    public void adicionarTransferencia(TED ted) {
        transferencias.add(ted);
    }

    public float getTotalTransferido() {
        float total = 0;
        for (TED ted : transferencias) {
            total += ted.getValor();
        }
        return total;
    }

    public List<TED> getTransferencias() {
        return transferencias;
    }
}


=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

    public interface Taxa {
    
    public float calcular(ListaTransferencia lista);
    
    }

    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

    public class BancoX implements Taxa {

    @Override
    public float calcular(ListaTransferencia lista) {
        float tarifa = 2;
        int quantidade = 2;
        int quantidadeTransferido = lista.getTransferencias().size();

        if (quantidadeTransferido <= quantidade) {
            return 0;
        }

        return (quantidadeTransferido - quantidade) * tarifa;
    }
}

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

public class BancoY implements Taxa {
    
    @Override
    public float calcular(ListaTransferencia lista) {
        float tarifa = 5;
        int quantidade = 3;
        int quantidadeTransferido = lista.getTransferencias().size();
        
        if (quantidadeTransferido <= quantidade) {
            return 0;
        }

        return (quantidadeTransferido - quantidade) * tarifa;
    }
}

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

public class BancoZ implements Taxa {
    
    @Override
    public float calcular(ListaTransferencia lista) {
        float tarifa = 2.5f;
        int quantidade = 1;
        int quantidadeTransferido = lista.getTransferencias().size();

        if (quantidadeTransferido <= 1) {
            return 0;
        }

        return (quantidadeTransferido - quantidade) * tarifa;
    }
}


b) Crie um projeto Java e aplique um padrão de projeto que encapsule as regras de cobrança de serviços em classes separadas e elimine a cadeia de ifs.

public enum CalculadoraTaxa {
    
    BancoX(new BancoX()),
    BancoY(new BancoY()),
    BancoZ(new BancoZ());

    private final Taxa taxa;

    private CalculadoraTaxa(Taxa taxa) {
        this.taxa = taxa;
    }

    public Taxa getBanco() {
        return taxa;
    }
}

c) Escreva uma classe principal para utilizar o recurso criado por você.

public class UsaBancos {
    
    public static void teste() {
        ListaTransferencia lista = new ListaTransferencia();

        lista.adicionarTransferencia(new TED(150));
        lista.adicionarTransferencia(new TED(49.5f));
        lista.adicionarTransferencia(new TED(367.89f));
        lista.adicionarTransferencia(new TED(6));

        System.out.printf("Total de transferências no dia: %d\n", lista.getTransferencias().size());
        System.out.printf("Valor total transferido: R$%.2f\n\n", lista.getTotalTransferido());

        for (CalculadoraTaxa c : CalculadoraTaxa.values()) {
            double resultado = c.getBanco().calcular(lista);
            System.out.printf("Seria cobrado o valor de R$%.2f do banco %s\n", resultado, c.name());
        }
    }

}

4) Faça o download da pasta Game. E siga o padrão já estabelecido no projeto.

a) Implemente estados esperando, pulando e abaixando para o player. Escreva também uma classe principal para validar a sua implementação.

public interface EstadoPlayer {
    public EstadoPlayer esperar();
    public EstadoPlayer correr();
    public EstadoPlayer pular();
    public EstadoPlayer abaixar();
}

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

public class Correndo implements EstadoPlayer{

    public Correndo() {
        System.out.println("Correndo");
    }
 
    @Override
    public EstadoPlayer esperar() {
      return new Esperando();  
    }

    @Override
    public EstadoPlayer correr() {
        System.out.println("Já está correndo"); 
        return this;
    }

    @Override
    public EstadoPlayer abaixar() {
        return new Abaixando();
    }

    @Override
    public EstadoPlayer pular() {
        return new Pulando();
    }
    
}

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

public class Esperando implements EstadoPlayer {
    
    public Esperando() {
        System.out.println("Esperando");
    }

    @Override
    public EstadoPlayer correr() {
        return new Correndo();
    }

    @Override
    public EstadoPlayer esperar() {
        System.out.println("Já estou esperando.");
        return this;
    }

    @Override
    public EstadoPlayer abaixar() {
        return new Abaixando();
    }

    @Override
    public EstadoPlayer pular() {
        return new Pulando();
    }
}

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

public class Pulando implements EstadoPlayer {
    
    public Pulando() {
        System.out.println("Estou pulando");
    }  

    @Override
    public EstadoPlayer pular() {
        System.out.println("Já estou pulando");
        return this;
    }

    @Override
    public EstadoPlayer correr() {
        return new Correndo();
    }

    @Override
    public EstadoPlayer esperar() {
        return new Esperando();
    }

    @Override
    public EstadoPlayer abaixar() {
        return new Abaixando();
    }
}

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

public class Abaixando implements EstadoPlayer {
    
    public Abaixando() {
        System.out.println("Estou abaixando");
    }

    @Override
    public EstadoPlayer abaixar() {
        System.out.println("Já estou abaixado");
        return this;
    }

    @Override
    public EstadoPlayer correr() {
        return new Correndo();
    }

    @Override
    public EstadoPlayer esperar() {
        return new Esperando();
    }

    @Override
    public EstadoPlayer pular() {
        return new Pulando();
    }
}

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

public class ControlaAcoes {
    private EstadoPlayer estado;

    public ControlaAcoes() {
        estado = new Esperando();
    }
    
    public void esperar(){
      estado = estado.esperar();
    }
    
    public void correr(){
      estado = estado.correr();
    } 

    public void pular() {
      estado = estado.pular();
    }

    public void abaixar() {
      estado = estado.abaixar();
    }

    public EstadoPlayer getEstado() {
      return estado;
    }

    public void setEstado(EstadoPlayer estado) {
      this.estado = estado;
    }
}

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

public class UsaGame {
    
    public static void teste() {
        ControlaAcoes controle = new ControlaAcoes();

        controle.correr();
        controle.esperar();
        for (int i = 0; i < 15; i++) {
            controle.abaixar();
            controle.pular();
        }
        controle.correr();
        controle.correr();
        controle.esperar();
    }

}
