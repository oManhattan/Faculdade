Gustavo Tozeti Herculano - 1142275851 
Matheus Cavalcanti de Arruda - 1142097286

Class Aluno
Solução

public class Aluno {

    private static long ura;

    private String name;
    private double nota1;
    private double nota2;
    private double media;
    private long ra;

    public Aluno() {

    }

    public Aluno(String name, double nota1, double nota2) {
        this.name = name;
        this.nota1 = nota1;
        this.nota2 = nota2;

        this.ra = 2000 + ura++;

        this.media = setMedia();
    }

    @Override
    public String toString() {
        return String.format("Nome: %s\nRA: %d\nNota 1: %.2f\nNota 2: %.2f\nMedia: %.2f\n", getName(), getRa(), getNota1(), getNota2(), getMedia());
    }

    public String getName() {
        return name;
    }

    public double getNota1() {
        return nota1;
    }

    public long getRa() {
        return ra;
    }

    public void setNota1(double nota1) {
        this.nota1 = nota1;
    }

    public double getNota2() {
        return nota2;
    }

    public void setNota2(double nota2) {
        this.nota2 = nota2;
    }

    private double setMedia() {
        return (this.getNota1() * 0.3) + (this.getNota2() * 0.7);
    }

    public double getMedia() {
        return media;
    }
}

Class ListaSimples
Solução
= = = = = = = = = = =



public class ListaSimples {

    private Elemento inicio = null, atual, aux;

    public void inserirPrimeiro(Object objeto) {

        Elemento e = new Elemento(objeto, inicio);
        inicio = e;
    }

    /**
     * Adiciona um Aluno na lista
     */
    public void inserir(Object objeto) {

        if (inicio == null) {
            inicio = new Elemento(objeto, null);
            aux = inicio;
        } else {
            atual = new Elemento(objeto, null);
            aux.setProx(atual);
            aux = atual;
        }
    }

    /**
     * Retorna um array de objeto com todos os alunos inseridos na lista
     */
    public void exibirLista() {
        Elemento x = inicio;

        while (x != null) {
            Aluno a = (Aluno) x.getObjeto();
            System.out.println(a.toString());
            x = x.getProx();
        }
    }

    /**
     * Retorna o aluno com o RA informado.
     * Caso o RA não seja encontrado uma mensagem de erro é enviada 
     */
    public Object retornaAluno(long ra) {
        Elemento x = inicio;

        while (x != null) {
            Aluno a = (Aluno) x.getObjeto();

            if (a.getRa() == ra) {
                return a;
            }

            x = x.getProx();
        }

        return String.format("O aluno com o RA %d não foi encontrado.", ra);
    }

    private Elemento[] removeSearch(long ra) {
        Elemento x = inicio, auxRem = null;
        Elemento[] v = {x, auxRem};
        Aluno a;

        while (x != null) {
            a = (Aluno) x.getObjeto();

            if (ra == a.getRa()) {
                v[0] = x;
                v[1] = auxRem;
                return v;
            }

            auxRem = x;
            x = x.getProx();
        }

        return null;
    }

    public boolean remover(long ra) {
        Elemento[] arr = removeSearch(ra);

        if (arr != null) {
            Elemento x = arr[0];
            Elemento auxRemove = arr[1];

            if (x == inicio) {
                inicio = x.getProx();
                x.setProx(null);
                return true;
            } else if (x == atual) {
                atual = auxRemove;
                aux = auxRemove;
                auxRemove.setProx(null);
                return true;
            } else {
                auxRemove.setProx(x.getProx());
                x.setProx(null);
                return true;
            }
        }

        return false;
    }

    private double getMediaGlobal() {
        int contador = 0;
        double mediaTotal = 0;

        Elemento x = inicio;

        while (x != null) {
            Aluno a = (Aluno) x.getObjeto();
            
            mediaTotal += a.getMedia();
            contador++;

            x = x.getProx();
        }

        return mediaTotal / contador;
    }

    public String mediaGlobal() {
        
        double mediaTotal = getMediaGlobal();

        int acima = 0;
        int abaixo = 0;

        Elemento e = inicio;

        while (e != null) {
            Aluno a = (Aluno) e.getObjeto();

            if (a.getMedia() >= mediaTotal) {
                acima++;
            } else {
                abaixo++;
            }

            e = e.getProx();
        }

        return String.format("Média Global: %.2f\nAlunos igual ou acima: %d\nAlunos abaixo: %d", mediaTotal, acima, abaixo);
    }

    // Classe interna
    private class Elemento {

        private Object objeto;
        private Elemento prox;

        public Elemento(Object objeto, ListaSimples.Elemento prox) {
            this.objeto = objeto;
            this.prox = prox;
        }

        public Object getObjeto() {
            return objeto;
        }

        // public void setObjeto(Object objeto) {
        //     this.objeto = objeto;
        // }

        public Elemento getProx() {
            return prox;
        }

        public void setProx(Elemento prox) {
            this.prox = prox;
        }
    }
}

Class UsaLista
Solução
==================

public class UsaLista {
    public static void main(String[] args) {

        // Criando alunos
        Aluno a1 = new Aluno("Boseuwel", 10, 8.9);
        Aluno a2 = new Aluno("Xabierpu", 2.7, 3.8);
        Aluno a3 = new Aluno("Wudaguce", 5.9, 1.4);
        Aluno a4 = new Aluno("Ceisusle", 3.5, 8.2);
        Aluno a5 = new Aluno("Puymilyo", 1.6, 3.1);
        Aluno a6 = new Aluno("Feahivor", 5.2, 5.8);
        Aluno a7 = new Aluno("Maylazun", 10, 2.7);
        Aluno a8 = new Aluno("Mufyakou", 2.9, 1.1);
        Aluno a9 = new Aluno("Ravotupa", 8.1, 4.9);
        Aluno a10 = new Aluno("Fiawoier", 4.5, 9.5);

        // Criar a lista encadeada
        ListaSimples lista = new ListaSimples();

        // Adicionando alguns alunos na forma padrão
        lista.inserir(a1);
        lista.inserir(a2);
        lista.inserir(a3);
        lista.inserir(a4);
        lista.inserir(a5);
        lista.inserir(a6);

        // Adicionando o restante na primeira posição
        lista.inserirPrimeiro(a7);
        lista.inserirPrimeiro(a8);
        lista.inserirPrimeiro(a9);
        lista.inserirPrimeiro(a10);

        System.out.println("Imprimindo todos os alunos\n");
        // Imprimindo todos os alunos
        lista.exibirLista();

        System.out.println("=================\n Removendo o aluno com RA 2008 e reimprimindo a lista\n");

        // Aluno de RA 2008 foi expulso
        lista.remover(2008);

        // Exibindo o restante dos alunos
        lista.exibirLista();

        System.out.println("=================\n Média global com o contador de alunos abaixo e acima da própria\n");
        // Relatório estatístico de todos os alunos
        System.out.println(lista.mediaGlobal());
    }
}
